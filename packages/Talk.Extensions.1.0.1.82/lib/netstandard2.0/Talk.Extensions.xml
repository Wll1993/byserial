<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Talk.Extensions</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:Talk.Extensions.CollectionExtension.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})" -->
        <member name="M:Talk.Extensions.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加ICollection中不存在的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.ComparableExtension.IsBetween``1(``0,``0,``0)">
            <summary>
            检查一个值在最小值和最大值之间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要检查的值</param>
            <param name="minInclusiveValue">最小(包容)值</param>
            <param name="maxInclusiveValue">最大(包容)值</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.ConfigurationManager.GetSection``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.ConfigurationManager.GetConfig(System.String,System.String)">
            <summary>
            获取配置文件
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.ConfigurationManager.GetTryConfig(System.String,System.String)">
            <summary>
            获取配置文件
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.ToLocalTimeKind(System.DateTime)">
            <summary>
            把时间设置为本地时区
            而不是转成本地时区，如系统的ToLocalTime就是把当前数据的时区（或没有带时区的默认成UTC）转成本地时区。这种情况就可能会加八个小时。导致值有变化。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.TimeStamp(System.DateTime)">
            <summary>
            获取时间戳
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.GetDateTime(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            转换时间戳
            </summary>
            <param name="timestamp">时间戳(默认毫秒)</param>
            <param name="ms">true/false 毫秒/秒</param>
            <param name="localTime">true/false 毫秒/秒</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.yyyMMddHHmmss(System.DateTime)">
            <summary>
            获取格式化时间字符串
            yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.HHmmss(System.DateTime)">
            <summary>
            获取格式化时间字符串
            HH:mm:ss
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.yyyMMddHHmmss2(System.DateTime)">
            <summary>
            获取格式化时间字符串
            yyyy/MM/dd HH:mm:ss
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.DateTimeExtension.TimeSpanChinese(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            获取中文间隔时间差
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.EncryptDecryptExtension">
            <summary>
            加密、解密
            </summary>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DESEncrypt(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="data">加密数据</param>
            <param name="key">8位字符的密钥字符串</param>
            <param name="iv">8位字符的初始化向量字符串</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DESDecrypt(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">解密数据</param>
            <param name="key">8位字符的密钥字符串(需要和加密时相同)</param>
            <param name="iv">8位字符的初始化向量字符串(需要和加密时相同)</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Md5Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Md5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            MD5加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.Md5Encrypt(System.IO.Stream)">
            <summary>
            MD5对文件流加密
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.ToMD5Encrypt16(System.String,System.Text.Encoding)">
            <summary>
            MD5加密(返回16位加密串)
            </summary>
            <param name="input"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.ToMd5(System.String)">
            <summary>
            Md5加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DES3Encrypt(System.String,System.String)">
            <summary>
            3DES加密
            </summary>
            <param name="str"></param>
            <param name="key">必须16位</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DES3TryEncrypt(System.String,System.String)">
            <summary>
            3DES加密
            </summary>
            <param name="str"></param>
            <param name="key">必须16位</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DES3Decrypt(System.String,System.String)">
            <summary>
            3DES解密
            </summary>
            <param name="str"></param>
            <param name="key">必须16位</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.DES3TryDecrypt(System.String,System.String)">
            <summary>
            3DES解密
            </summary>
            <param name="str"></param>
            <param name="key">必须16位</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSAEncrypt(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            RSA加密
            </summary>
            <param name="str">需要加密的内容</param>
            <param name="publicKey">公钥</param>
            <param name="type">类型（加密算法类型 RSA SHA1 长度不限制，推荐使用2048位以上;RSA2 SHA256 密钥长度至少为2048）</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSATryEncrypt(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            RSA加密
            </summary>
            <param name="str">需要加密的内容</param>
            <param name="publicKey">公钥</param>
            <param name="type">类型（加密算法类型 RSA SHA1 长度不限制，推荐使用2048位以上;RSA2 SHA256 密钥长度至少为2048）</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSADecrypt(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            RSA解密
            </summary>
            <param name="str">需要解密的内容</param>
            <param name="privateKey">私钥</param>
            <param name="type">类型（加密算法类型 RSA SHA1 长度不限制，推荐使用2048位以上;RSA2 SHA256 密钥长度至少为2048）</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSATryDecrypt(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            RSA解密
            </summary>
            <param name="str">需要解密的内容</param>
            <param name="privateKey">私钥</param>
            <param name="type">类型（加密算法类型 RSA SHA1 长度不限制，推荐使用2048位以上;RSA2 SHA256 密钥长度至少为2048）</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSASign(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            签名
            </summary>
            <param name="str">需要签名的字符串</param>
            <param name="privateKey">私钥</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSATrySign(System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            签名
            </summary>
            <param name="str">需要签名的字符串</param>
            <param name="privateKey">私钥</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSAVerify(System.String,System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            验证签名
            </summary>
            <param name="str">需要验签的字符串</param>
            <param name="sign">签名</param>
            <param name="publicKey">公钥</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EncryptDecryptExtension.RSATryVerify(System.String,System.String,System.String,Talk.Extensions.RSAType)">
            <summary>
            验证签名
            </summary>
            <param name="str">需要验签的字符串</param>
            <param name="sign">签名</param>
            <param name="publicKey">公钥</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.EnumExtension">
            <summary>
            枚举 扩展类
            </summary>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.ToDisplay(System.Enum)">
            <summary>
            获取DisplayAttribute上指定的Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.ToDescription(System.Enum)">
            <summary>
             获取DescriptionAttribute上指定的Description
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.ToEnum``1(System.Int32,``0)">
            <summary>
             转化为枚举类型，转化不成功为默认值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.GetDisplayName(System.Enum,System.String)">
            <summary>
            获取DisplayAttribute上指定的Name
            </summary>
            <param name="value"></param>
            <param name="defVal">defVal</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.GetDisplayShortName(System.Enum,System.String)">
            <summary>
            获取DisplayAttribute上指定的ShortName
            </summary>
            <param name="value"></param>
            <param name="defVal">defVal</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumExtension.GetDisplayDesc(System.Enum,System.String)">
            <summary>
            获取DisplayAttribute上指定的Desc
            </summary>
            <param name="value"></param>
            <param name="defVal">defVal</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.EnumEntry`2">
            <summary>
            枚举Entry
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <typeparam name="TRaw">枚举类型的基础类型</typeparam>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.RawValue">
            <summary>
            基础数值类型
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.EnumValue">
            <summary>
            原始枚举类型
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.EnumString">
            <summary>
            枚举类型字符串表示
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.Description">
            <summary>
            枚举类型的文字描述(DescriptionAttribute)
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.DisplayName">
            <summary>
            枚举类型的本地字符串名称(DisplayAttribute.Name)
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.DisplayShortName">
            <summary>
            枚举类型的本地字符串简称(DisplayAttribute.ShortName)
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.DisplayOrder">
            <summary>
            枚举类型的Order(DisplayAttribute.Order)
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.DisplayDesc">
            <summary>
            枚举类型的本地字符串说明(DisplayAttribute.Description)
            </summary>
        </member>
        <member name="P:Talk.Extensions.EnumEntry`2.CustomName">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="T:Talk.Extensions.EnumHelper">
            <summary>
            枚举类型的帮助类
            </summary>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.ConvertEnumToList``1(System.Type,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String,System.String})">
            <summary>
            将指定枚举类型转换成List，用来绑定DropDownList
            </summary>
            <typeparam name="T">枚举类型的基础型</typeparam>
            <param name="enumType">枚举类型</param>
            <param name="excludes">排除的枚举类型集合（基础型集合）</param>
            <param name="func">枚举类型对应的文字描述</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.GetEnumShortNameByCode``2(System.Collections.Generic.List{Talk.Extensions.EnumEntry{``0,``1}},System.String,System.String,System.String)">
            <summary>
            获取EnumEntry元素简称
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1"></typeparam>
            <param name="enums"></param>
            <param name="code">编码</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.GetEnumDescription(System.Enum)">
            <summary>
            取得枚举类型的说明文字
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.GetEnumDisplay(System.Enum,System.Int32)">
            <summary>
            
            </summary>
            <param name="objEnum"></param>
            <param name="flag">默认值为0.获取Display属性Name值，否则获取Descriptiom</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.GetEnumDisplayAttributs(System.Enum)">
            <summary>
            取得枚举类型的Display属性
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.EnumHelper.ConvertToEnum``1(System.String,``0)">
            <summary>
            把值转换为相应的枚举类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="rawVal">值</param>
            <param name="defVal">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.Base64Convert">
            <summary>
            Base64图片相互转换
            http://m.tnblog.net/aojiancc2/article/details/2622
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.Base64Convert.FileToBase64(System.String)">
            <summary>
            文件转换成Base64字符串
            </summary>
            <param name="fileName">文件绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.Base64Convert.Base64ToFileAndSave(System.String,System.String)">
            <summary>
            Base64字符串转换成文件
            </summary>
            <param name="strInput">base64字符串</param>
            <param name="fileName">保存文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.CalculateHelper">
            <summary>
            相关计算
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.CalculateHelper.WetBulbTemperatureCalculate(System.Single,System.Single)">
            <summary>
            湿球温度计算
            </summary>
            <param name="humidity">湿度</param>
            <param name="temperature">干球温度</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.CalculateHelper.MoistureContentCalculate(System.Single,System.Single)">
            <summary>
            含湿量计算
            </summary>
            <param name="humidity">湿度</param>
            <param name="temperature">干球温度</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.CalculateHelper.AQICalculate(System.Double)">
            <summary>
            AQI计算
            </summary>
            <param name="co1">一氧化碳（mg/m³）</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.CodeBuilderHelper">
            <summary>
            code生成器
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.CodeBuilderHelper.Dictionaries">
            <summary>
            字典
            警告：不可随意修改字典
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.CodeBuilderHelper.ConvertToCode(System.Char,System.Int32)">
            <summary>
            Code转换器
            </summary>
            <param name="numberChar">数字</param>
            <param name="position">位数</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.CodeBuilderHelper.NumberConvertCode(System.Int32,System.Int32)">
            <summary>
            数字转成混淆后的Code
            </summary>
            <param name="number">数字</param>
            <param name="position">位数</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.CodeBuilderHelper.CodeConvertNumber(System.String)">
            <summary>
            混淆后的Code解析成自增数字
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.HttpHelper">
            <summary>
            请求帮助类
            </summary>
        </member>
        <member name="F:Talk.Extensions.Helper.HttpHelper.dictionary">
            <summary>
            不同url分配不同HttpClient
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.PostAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post请求
            </summary>
            <param name="url">url地址</param>
            <param name="jsonString">请求参数（Json字符串）</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.PostAsync``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">url地址</param>
            <param name="content">请求参数</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get请求
            </summary>
            <param name="url">url地址</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.PutAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Put请求
            </summary>
            <param name="url">url地址</param>
            <param name="jsonString">请求参数（Json字符串）</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.PutAsync``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Put请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">url地址</param>
            <param name="content">请求参数</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.HttpHelper.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Delete请求
            </summary>
            <param name="url">url地址</param>
            <param name="authorization">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.MoistureContentData">
            <summary>
            含湿量数据
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.MoistureContentData.PartialPressureSaturatedSteam">
            <summary>
            饱和水蒸气分压力Pa
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.MoistureContentData.MoistureContent">
            <summary>
            含湿量kg/kg
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.MoistureContentData.Enthalpy">
            <summary>
            焓值计算KJ/Kg
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.MoistureContentData.PartialPressure">
            <summary>
            相对湿度100%时的分压力
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.MoistureContentData.DewPointTemperature">
            <summary>
            露点温度
            </summary>
        </member>
        <member name="T:Talk.Extensions.Helper.PidHelper">
            <summary>
            https://en.wikipedia.org/wiki/PID_controller    
            积分就像惯性一样，系数越大惯性越大；微分就像阻尼，系数越大系统刚性越强？
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="GainProportional">比例（P）</param>
            <param name="GainIntegral">积分（I）</param>
            <param name="GainDerivative">微分（D）</param>
            <param name="OutputMax">输出限幅</param>
            <param name="OutputMin">输出限幅</param>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.Preferences(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            参数设置
            </summary>
            <param name="gainProportional">比例（P）</param>
            <param name="gainIntegral">积分（I）</param>
            <param name="gainDerivative">微分（D）</param>
            <param name="outputMax">输出限幅</param>
            <param name="outputMin">输出限幅</param>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.ControlVariable(System.Double,System.Double,System.TimeSpan)">
            <summary>
            控制器的输出
            </summary>
            <param name="setPoint"></param>
            <param name="processVariable"></param>
            <param name="timeSinceLastUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.ControlVariable(System.TimeSpan)">
            <summary>
            The controller output 控制器的输出
            </summary>
            <param name="timeSinceLastUpdate">timespan of the elapsed time
            since the previous time that ControlVariable was called 
            自上次调用ControlVariable以来经过的时间跨度 </param>        
            <returns>Value of the variable that needs to be controlled 需要控制的变量的值</returns>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.GainDerivative">
            <summary>
            The derivative term is proportional to the rate of
            change of the error
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.GainIntegral">
            <summary>
            The integral term is proportional to both the magnitude
            of the error and the duration of the error
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.GainProportional">
            <summary>
            The proportional term produces an output value that
            is proportional to the current error value
            </summary>
            <remarks>
            Tuning theory and industrial practice indicate that the
            proportional term should contribute the bulk of the output change.
            </remarks>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.OutputMax">
            <summary>
            The max output value the control device can accept.
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.OutputMin">
            <summary>
            The minimum ouput value the control device can accept.
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.IntegralTerm">
            <summary>
            Adjustment made by considering the accumulated error over time
            通过考虑随时间累积的误差进行的调整
            </summary>
            <remarks>
            An alternative formulation of the integral action, is the
            proportional-summation-difference used in discrete-time systems
            </remarks>
        </member>
        <member name="F:Talk.Extensions.Helper.PidHelper.processVariable">
            <summary>
            变数
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.ProcessVariable">
            <summary>
            The current value
            当前值（反馈值）
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.ProcessVariableLast">
            <summary>
            The last reported value (used to calculate the rate of change)
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.PidHelper.SetPoint">
            <summary>
            The desired value 所需的值（设定值）
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.PidHelper.Clamp(System.Double)">
            <summary>
            Limit a variable to the set OutputMax and OutputMin properties
            </summary>
            <returns>
            A value that is between the OutputMax and OutputMin properties
            </returns>
            <remarks>
            Inspiration from http://stackoverflow.com/questions/3176602/how-to-force-a-number-to-be-in-a-range-in-c
            </remarks>
        </member>
        <member name="M:Talk.Extensions.Helper.ReflectionHelper.DynamicSetValue(System.Object,System.String,System.Object)">
            <summary>
            通过反射设置对象的值
            </summary>
            <param name="obj"></param>
            <param name="propertieName">字段名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Talk.Extensions.Helper.ReflectionHelper.DynamicGetValue(System.Object,System.String)">
            <summary>
            通过反射获取对象的值
            </summary>
            <param name="obj"></param>
            <param name="propertieName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="seqKey"></param>
        </member>
        <member name="P:Talk.Extensions.Helper.ShortCodeGenerate.CodeLength">
            <summary>
            短码长度        
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.ShortCodeGenerate.MaxLength">
            <summary>
            注意：超过设定的长度可能会有异常数据
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.GenerateKeys">
            <summary>
            生成随机的0-9a-zA-Z字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.Convert(System.Int64)">
            <summary>
            10进制转换为62进制【简单】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.Convert(System.String)">
            <summary>
            将62进制转为10进制【简单】
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.ConfusionConvert(System.Int64)">
            <summary>
            10进制转换为62进制【混淆】
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.Helper.ShortCodeGenerate.ConfusionConvert(System.String)">
            <summary>
            将62进制转为10进制【混淆】
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.Helper.StopwatchHelper">
            <summary>
            执行时间性能监控
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.StopwatchHelper.Restart">
            <summary>
            重新计算
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.StopwatchHelper.GetTotalSeconds">
            <summary>
            执行总秒数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.OSArchitecture">
            <summary>
            系统架构
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.OSDescription">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.ProcessArchitecture">
            <summary>
            进程架构
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.Is64BitOperatingSystem">
            <summary>
            是否64位操作系统
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.ProcessorCount">
            <summary>
            CPU CORE
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.MachineName">
            <summary>
            HostName
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.OSVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.FirstIpV4Address">
            <summary>
            IPV4地址
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.MacAddress">
            <summary>
            MAC地址
            </summary>
        </member>
        <member name="P:Talk.Extensions.Helper.SystemInfo.OSInfo.SerialNumber">
            <summary>
            自定义序列号
            注意：IP地址、计算机名称、系统版本有可能会发生变化，导致SerialNumber变化
            </summary>
        </member>
        <member name="T:Talk.Extensions.Helper.SystemInfo.SystemInfoHelper">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="M:Talk.Extensions.Helper.SystemInfo.SystemInfoHelper.GetOSInfo(System.String)">
            <summary>
            获取系统信息
            </summary>
            <param name="fuzzyIp">ip模糊匹配，定位到想要的网卡</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.NumberHelper.KeepDigit(System.Single,System.Int32)">
            <summary>
            保留小数位 - 不四舍五入（默认保留2位）
            </summary>
            <param name="number"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.NumberHelper.Round(System.Double,System.Int32)">
            <summary>
            保留小数位 - 四舍五入（默认保留2位）
            </summary>
            <param name="number"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.NumberHelper.KBToShowSize(System.Single)">
            <summary>
            千字节(KB)转可读大小
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.NumberHelper.BToShowSize(System.Single)">
            <summary>
            字节(B)转可读大小
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.RSAHelper">
            <summary>
            https://www.cnblogs.com/stulzq/p/7757915.html
            </summary>
        </member>
        <member name="M:Talk.Extensions.RSAHelper.#ctor(Talk.Extensions.RSAType,System.Text.Encoding,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:Talk.Extensions.RSAHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.RSAHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="T:Talk.Extensions.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:Talk.Extensions.RSAType.RSA">
            <summary>
            SHA1 对RSA密钥的长度不限制，推荐使用2048位以上
            </summary>
        </member>
        <member name="F:Talk.Extensions.RSAType.RSA2">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="M:Talk.Extensions.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            字符串是否为Null、空字符串组成。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            字符串是否为Null、空字符串或仅由空白字符组成。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.If(System.String,System.Boolean)">
            <summary>
            添加判断添加
            </summary>
            <param name="str"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.Left(System.String,System.Int32)">
            <summary>
            从字符串的开头得到一个字符串的子串
            len参数不能大于给定字符串的长度
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.Right(System.String,System.Int32)">
            <summary>
            从字符串的末尾得到一个字符串的子串
            len参数不能大于给定字符串的长度
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.MaxLeft(System.String,System.Int32)">
            <summary>
            
            len参数大于给定字符串是返回原字符串
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.Sub(System.String,System.Int32)">
            <summary>
            从指定位置截取字符串，如果小于指定位置，则返回空字符串
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.MaxRight(System.String,System.Int32)">
            <summary>
            从字符串的末尾得到一个字符串的子串
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.IsDouble(System.String)">
            <summary>
            是否是数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.GetPinyin(System.String)">
            <summary> 
            汉字转化为拼音
            https://www.cnblogs.com/lwc1st/archive/2018/05/16/9045382.html
            https://gitee.com/hyjiacan/Pinyin4Net
            </summary> 
            <param name="str">汉字</param> 
            <returns>全拼</returns> 
        </member>
        <member name="M:Talk.Extensions.StringExtension.GetFirstPinyin(System.String)">
            <summary> 
            汉字转化为拼音首字母
            </summary> 
            <param name="str">汉字</param> 
            <returns>首字母</returns> 
        </member>
        <member name="M:Talk.Extensions.StringExtension.ToEnum``1(System.String)">
            <summary>
            字符串转枚举
            </summary>
            <typeparam name="T">类型的枚举</typeparam>
            <param name="value">字符串值转换</param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.ToEnum``1(System.String,System.Boolean)">
            <summary>
            字符串转枚举
            </summary>
            <typeparam name="T">类型的枚举</typeparam>
            <param name="value">字符串值转换</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.ToDataFormType(System.String,System.Type)">
            <summary>
            转出对应数据类型
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.ToFloatOrDefault(System.String,System.Nullable{System.Single})">
            <summary>
            如果不是数值 则返回默认值
            </summary>
            <param name="str"></param>
            <param name="defaultNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.BytesToString(System.Byte[])">
            <summary>
            Bytes转String
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:Talk.Extensions.StringExtension.ToBytes(System.String)">
            <summary>
            String转Bytes
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
    </members>
</doc>
